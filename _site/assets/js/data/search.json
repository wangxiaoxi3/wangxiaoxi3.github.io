[ { "title": "Shell-常用JQ命令详解", "url": "/posts/shell-jq/", "categories": "Shell", "tags": "jq", "date": "2020-10-16 13:30:00 +0800", "snippet": "一、jq 简介JSON是一种轻量级的数据交换格式。其采用完全独立于语言的文本格式，具有方便人阅读和编写，同时也易于机器的解析和生成。这些特性决定了JSON格式越来越广泛的应用于现代的各种系统中。作为系统管理员，在日常的工作中无论是编辑配置文件或者通过http请求查询信息，我们都不可避免的要处理JSON格式的数据。jq 是一款命令行下处理JSON数据的工具。其可以接受标准输入，命令管道或者文件中的JSON数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq的这种特性使我们可以很容易地在Shell脚本中调用它。二、常用基础命令基础表达式..." }, { "title": "Python-接收并打印WebHook请求", "url": "/posts/ngrok-python/", "categories": "Python", "tags": "内网穿透", "date": "2020-10-09 09:30:00 +0800", "snippet": "什么是WebHook?WebHook是一个API概念，是微服务API的使用范式之一，也被成为反向API，即：前端不主动发送请求，完全由后端推送。 举个常用例子，比如你的好友发了一条朋友圈，后端将这条消息推送给所有其他好友的客户端，就是Webhooks的典型场景。简单来说，WebHook就是一个接收HTTP-POST(或GET，PUT，DELETE)的URL。一个实现了WebHook的API提供商就是在当事件发生的时候会向这个配置好的URL发送一条信息。与请求-响应式不同，使用WebHook，你可以实时接受到变化。这是一种对客户机-服务器模式的逆转，在传统方法中，客户端从服务器请求数据，然..." }, { "title": "Ngrok内网穿透教程", "url": "/posts/ngrok/", "categories": "Ngrok", "tags": "内网穿透", "date": "2020-10-08 23:30:00 +0800", "snippet": "前言：Ngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。Ngrok可捕获和分析所有通道上的流量，便于后期分析和重放。环境配置1、进入Ngrok官网（https://ngrok.com/），注册Ngrok账号并下载Ngrok；2、解压zip文件，并进入解压文件夹；3、根据官网给定的授权码，运行如下授权命令；./ngrok authtoken 1iclsessionsessionsessionsessionsessionL1LTo3H授权码和账户是绑定的，在授权命令运行后，ngrok会将授权码保存在~/.ngrok2/ngrok.yml中，所以只需要运..." }, { "title": "Jenkins - 构建自动化任务", "url": "/posts/jenkins-zd/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 09:30:00 +0800", "snippet": "前言：Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。一、环境配置1、切换到jenkins.jar存放的目录，输入如下命令：$ java -jar jenkins.war如果需要修改端口可以使用如下命令：$ java -jar jenkins.war –httpPort=8081然后在浏览器中输入localhost:8080，localhost可以是本机的ip，也可以是计算机名。就可以打开jenkins。2、用tomcat打开解压tomcat到某个目录,如/usr/local，进入t..." }, { "title": "Docker常用命令", "url": "/posts/docker-list/", "categories": "Docker", "tags": "", "date": "2020-09-30 09:30:00 +0800", "snippet": "一、镜像管理命令1、拉取镜像docker pull {image_name}docker pull {image_name}:2.3拉取指定版本镜像2、推送镜像docker push {image_name}3、查看当前机器的所有镜像docker images4、删除当前机器的镜像docker rmi {image_name}5、强制删除镜像docker rm -f {image_name}6、为镜像打tagdocker tag {source_image_name:tag your_image_name:tag}7、获取容器/镜像的元数据docker inspect {image_id..." }, { "title": "Jenkins - job之间传参", "url": "/posts/jenkins-job/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 08:30:00 +0800", "snippet": "前言：本文介绍插件： Parameterized Trigger plugin的具体使用方法。一、插件介绍Parameterized Trigger plugin插件可以让你在构建完成时触发新的Job构建，并以各种方式为新Job构建指定参数。当然也可以添加多个配置：每个配置都有一个要触发的Job，触发时间的条件（基于当前构建的结果）和参数部分。二、使用方法1、项目Test_A，配置-构建后操作-配置如下信息:选择【Trigger parameterized build on other projects】 【Projects to build】：项目名称 【Trigger when ..." }, { "title": "Jenkins - Extended E-mail配置", "url": "/posts/jenkins-email/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 07:30:00 +0800", "snippet": "前言：在Jenkins的使用中邮件提醒是一个常用功能，Extended E-mail Notification是一个功能更为齐全，使用也更为复杂的插件，本文即将为大家详细讲解如何配置相关内容，感兴趣的话继续往下看吧！～～一、全局设置进入系统管理- 系统设置 - Extended E-mail Notification⚠️注意事项：1)如果设置QQ邮箱的话，密码必须为授权码，方法为：登录QQ邮箱，在“帐户”里开启“POP3/SMTP”并获取授权码。（否则报错535）2)必须勾选【Use SMTP Authentication】【Use SSL】3)用户名必须与系统管理员邮件地址保持一致。（..." }, { "title": "Jenkins - 构建Allure Report", "url": "/posts/jenkins-allure/", "categories": "Jenkins", "tags": "Jenkins", "date": "2020-09-30 06:30:00 +0800", "snippet": "前言本文为Pytest+Allure定制报告进阶篇，集成Jenkins，在Jenkins中直接生成报告，更方便测试人员查看。一、安装插件插件官方地址：allure-jenkins-plugin 1、进入系统管理 - 管理插件2、搜索Allure，并进行安装，重启Jenkins3、进入系统管理 - 全局工具配置 - Allure Commandline4、点击 Allure Commandline安装，如下图：其中name可随便定义，作为标识用。二、构建配置 1、General - 参数化构建过程 处增加参数ALLURE_HOME，参数值填写存放allure results的默认路径。..." }, { "title": "Pytest+Allure定制报告", "url": "/posts/pytest-allure/", "categories": "Python", "tags": "Allure", "date": "2020-09-29 16:30:00 +0800", "snippet": "前言：最近在研究接口自动化的框架，好的测试报告在整个测试框架起到至关重要的部分。终于被我发现一个超好用的报告框架,不仅报告美观,而且方便CI集成。就是它，就是它：Allure Test Report！！！ 先上一张报告效果图：python版本及必要库-(2020-4-30)更新pytest==5.3.1allure-pytest==2.8.6allure-python-commons==2.8.6⚠️注：pytest-allure-adaptor已弃用，改为allure-pytest；安装allure-pytest时，需将pytest-allure-adaptor卸载一、环境配置安装P..." }, { "title": "Monkey命令", "url": "/posts/android-monkey/", "categories": "Android", "tags": "Monkey", "date": "2020-09-29 14:20:23 +0800", "snippet": "Monkey相关指令1、启动指定的应用程序，并向其发送100个伪随机事件 示例：adb shell monkey -p package_name -v 1002、日志级别 Level 1 示例：adb shell monkey -p package_name -v-v 100说明：提供较为详细的日志，包括每个发送到Activity的事件信息3、日志级别 Level 2 示例：adb shell monkey -p package_name -v-v-v 100说明：最详细的日志，包括了测试中选中/未选中的Activity信息4、用于指定伪随机数生成器的seed值，如果seed相同，..." }, { "title": "Adb命令", "url": "/posts/android-adb/", "categories": "Android", "tags": "Adb", "date": "2020-09-29 14:20:23 +0800", "snippet": "查看设备列表adb devices进入模拟器的shell模式adb shell获取管理员权限adb root安装软件adb install [-r] [-s] /Users/wangjuan/Downloads/v6.6.apk 电脑本地安装adb shell pm install [-k] /storage/emulated/0/apk/v6.6.apk 手机本地安装卸载软件adb shell pm uninstall [-k] &amp;lt;包名&amp;gt;从电脑上发送文件到设备adb push /Users/wangjuan/Downloads/v6.6.apk /sto..." }, { "title": "APP启动时间", "url": "/posts/android-start/", "categories": "Android", "tags": "Android专项测试", "date": "2020-09-29 13:20:23 +0800", "snippet": "一、adb shell 命令查看adb shell am force-stop com.qiyi.videoadb shell am start -S -W com.qiyi.video/.WelcomeActivityadb logcat |grep -I activitymanager.*Displayedlazy load：只能埋点thisTime: 最后一个activity时间totalTime：包括间接启动的activity时间waitTime：总体消耗时间二、录屏分帧录屏（通过录制整个加载过程得到加载过程视频）：adb shell screenrecord —time-..." }, { "title": "获取App系统资源", "url": "/posts/android-info/", "categories": "Android", "tags": "Android专项测试", "date": "2020-09-29 13:20:23 +0800", "snippet": "1、获取Top信息adb shell top | grep {package_name}2、获取CPU数据adb shell dumpsys cpuinfo3、获取内存数据adb shell dumpsys meminfo 进程消耗内存列表 adb shell dumpsys meminfo pakagename or Pidadb shell getprop dalvik.vm.heapgrowthlimit 查看进程可用的最大内存4、获取流量信息adb shell cat /proc/#pid#/net/dev 需先获取进程idReceive 表示收包；Transmit 表示发包..." }, { "title": "SQL多表查询", "url": "/posts/sql-join/", "categories": "数据库", "tags": "Sql", "date": "2020-09-28 13:20:23 +0800", "snippet": "一、 UNION 操作符用于合并两个或多个 SELECT 语句的结果集。# union 筛选不同值SELECT ID,Name FROM StudentsUNIONSELECT ID,Name FROM Teachers# union all 保留所有值SELECT Name FROM StudentsUNION ALLSELECT Name FROM Teachers二、 INNER JOIN（内连接），根据两个或多个表中的列之间的关系，从这些表中查询数据。SELECT Students.ID,Students.Name,Majors.Name AS MajorNameFROM Stu..." }, { "title": "SQL基础语句", "url": "/posts/sql-default/", "categories": "数据库", "tags": "Sql", "date": "2020-09-28 13:20:23 +0800", "snippet": " 显示数据库–&amp;gt; show databases; 判断是否存在数据库test_mysql,有的话先删除–&amp;gt; drop database if exists test_mysql; 创建数据库–&amp;gt; create database test_mysql; 删除数据库–&amp;gt; drop database test_mysql; 使用该数据库–&amp;gt; use test_mysql; 显示数据库中的表–&amp;gt; show tables; ..." }, { "title": "Mac下安装Maven", "url": "/posts/java-mvn/", "categories": "Java", "tags": "", "date": "2020-09-28 13:20:23 +0800", "snippet": "1、下载maven2、解压到指定目录 /Library/apache-maven-3.6.33、设置环境变量，打开终端，输入vim ~/.bash_profileexport MAVEN_HOME=/Library/apache-maven-3.6.3export PATH=$PATH:$MAVEN_HOME/bin添加完之后，按esc，执行:wq保存退出4、执行 source ~/.bash_profile 为配置环境变量生效5、测试 mvn -v 查看是否出现maven版本Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6b..." }, { "title": "Mac下安装AgileTC", "url": "/posts/java-agileTC/", "categories": "Java", "tags": "用例管理平台", "date": "2020-09-28 13:20:23 +0800", "snippet": "简介AgileTC是一套敏捷的测试用例管理平台，支持测试用例管理、执行计划管理、进度计算、多人实时协同等能力，方便测试人员对用例进行管理和沉淀。产品以脑图方式编辑可快速上手，用例关联需求形成流程闭环，并支持组件化引用，可在各个平台嵌入使用，是测试人员的贴心助手！环境依赖 Mac/Linux/Windows  Java 1.8  Mysql 服务端  Maven安装使用1、下载源码git clone https://github.com/didi/AgileTC.git 2、创建依赖数据库，默认数据库名为：case_manager 执行sql:  create database c..." }, { "title": "Python-字典与序列", "url": "/posts/python-set/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "一、集合（set）和字典（dict）区别：1、字典是一系列由键key和值value配对组成的元素的集合，在python3.7+，字典被确定为有序。3.6之前是无序的，其长度大小可变，元素可以任意的删减和改变。2、集合没有键和值的配对，是一系列无序的，唯一的元素组合。二、创建集合（set）和字典（dict）# 创建字典d1 = {&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;}d2 = dict({&#39;name&#39;:&#39;jason&#39;,&#39;age&#..." }, { "title": "Python-知识要点图", "url": "/posts/python-more/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "" }, { "title": "Python-列表与元组", "url": "/posts/python-list/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "Python 中最常见的两种数据结构：列表（list）和元组（tuple）1、列表是动态的，长度不固定，可以增加，删除，改变元素2、元组是静态的，长度固定，无法增加，删除，改变一、修改列表和元组tup = (1,2,3,4)new_tup = tup + (5,)print (new_tup)结果：(1,2,3,4,5)l = [1,2,3,4]l.append(5)print(l)结果：[1,2,3,4,5]二、列表和元组索引```-1 表示最后一个元素，-2 表示倒数第二个元素，以此类推。l = [1, 2, 3, 4]print(l[-1])4tup = (1, 2, 3, 4)p..." }, { "title": "Python-匿名函数", "url": "/posts/python-lambda/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "匿名函数的关键字是 lambda，之后是一系列的参数，然后用冒号隔开，最后则是由这些参数组成的表达式。lambda argument1, argument2,... argumentN : expression第一:lambda 是一个表达式（expression），并不是一个语句（statement）。square = lambda x: x**2square(3)运行结果：9第二:lambda 的主体是只有一行的简单表达式，并不能扩展成一个多行的代码块。第三:为什么要使用匿名函数？ 减少代码的重复性 模块化代码" }, { "title": "Python-异常总结", "url": "/posts/python-exception/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "一、常见异常总结 字符 说明 BaseException 所有异常的基类 SysternExit 解释器请求退出 KeyboardInterrupt 用户中断执行 Exception 常规错误的基类 Stopiteration 迭代器没有更多的值 GeneratorExit 生成器发生异常来通知退出 Stand..." }, { "title": "MySQL与MongoDB区别", "url": "/posts/sql-diff/", "categories": "数据库", "tags": "", "date": "2020-09-14 13:20:23 +0800", "snippet": "前言：MySQL与MongoDB都是开源的常用数据库，但是MySQL是传统的关系型数据库，MongoDB则是非关系型数据库，也叫文档型数据库，是一种NoSQL的数据库。它们各有各的优点，关键是看用在什么地方。所以我们所熟知的那些SQL语句就不适用于MongoDB了，因为SQL语句是关系型数据库的标准语言。一、关系型数据库-MySQL1、在不同的引擎上有不同的存储方式。2、查询语句是使用传统的sql语句，拥有较为成熟的体系，成熟度很高。3、开源数据库的份额在不断增加，mysql的份额页在持续增长。4、缺点就是在海量数据处理的时候效率会显著变慢。二、非关系型数据库-MongoDB非关系型数据..." }, { "title": "MongoDB常用命令", "url": "/posts/sql-db/", "categories": "数据库", "tags": "MongoDB", "date": "2020-09-14 13:20:23 +0800", "snippet": "1、常用的命令 show dbs 显示数据库列表 use dbname 进入dbname数据库，大小写敏感 show collections 显示数据库中的集合，相当于表格2、创建&amp;amp;新增 db.users.save({“name”:”jack”}) 创建了名为users的集合，并新增了一条{“name”:”lecaf”}的数据 db.users.insert({“name”:”jack”, “age”:20}) 在users集合中插入一条新数据，如果没有users这个集合，mongodb会自动创建3、删除 db.users.remove() 删除users集合..." }, { "title": "Selenium-显示等待方法", "url": "/posts/selenium-until/", "categories": "Selenium", "tags": "Selenium", "date": "2020-09-14 13:20:23 +0800", "snippet": "1、显示等待语法WebDriverWait(driver, timeout, poll_frequency, ignored_exceptions)driver: 传入WebDriver实例，即webdriver.Chrome()timeout: 超时时间，等待的最长时间（同时要考虑隐性等待时间）poll_frequency: 调用until或until_not中的方法的间隔时间，默认是0.5秒ignored_exceptions: 忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常， 则不中断代码，继续等待，如果抛出的是这个元组外的异常，则中断代码，抛出异..." }, { "title": "Python-字符串", "url": "/posts/python-str/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "Python - 字符串一、单引号、双引号、三引号区别1、Python 中单引号、双引号和三引号的字符串是一模一样的，没有区别。2、双引号中可内嵌带引号的字符串。3、三引号则主要应用于多行字符串的情景，如函数注释等。二、转义符 转义字符 说明 \\newline 接下一行 \\\\ 表示| \\’ 表示单引号 \\” 表示双引号 \\n 换行 \\t ..." }, { "title": "Python-正则表达式二", "url": "/posts/python-regular-2/", "categories": "Python", "tags": "正则表达式", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、常用的匹配规则总结表 字符 说明 \\w 匹配字母数字及下划线 \\W 匹配非字母数字及下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9] \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z ..." }, { "title": "Python-正则表达式一", "url": "/posts/python-regular-1/", "categories": "Python", "tags": "正则表达式", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、简单介绍-在线正则表达式测试工具 通配符(.)正则表达式可以匹配多于一个的字符串，通配符（.）可以匹配任何除换行符“\\n”外的字符。 例：待匹配文本：`school`正则表达式：`s…l`匹配结果：`school` 转义符()转义字符，使用后使一个字符改变原来的意思，如果字符串中有字符需要匹配，可以使用（\\字符）来表达。 例：待匹配文本：`W3.school`正则表达式：`W3\\.school`匹配结果：`W3.school` 字符集（[ ]）我们可以使用中括号（[ ]）括住字符串来创建字符集。可以使用范围，比如‘[a-z]’能够匹配a到z的..." }, { "title": "Python-运算符", "url": "/posts/python-operator/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "1、Python算术运算符以下假设变量a为10，变量b为21：2、Python比较运算符以下假设变量a为10，变量b为20：3、赋值运算符以下假设变量a为10，变量b为20：4、Python位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13二进制格式如下：a = 0011 1100b = 0000 1101-----------------a&amp;amp;b = 0000 1100a|b = 0011 1101a^b = 0011 0001~a = 1100 0011以上，对你有帮助的话，点赞❤️吧～～" }, { "title": "Python-List操作", "url": "/posts/python-list/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "前言：序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。1、创建list只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：list0 = [] # 空列表list1 = [&#39;phthon&#39;, &#39;java&#39;, 1997, 2000]list2 = [1, 2, 3, 4, 5 ]list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]与字符串的索引一样，列表索引从0开始。列表可以进行截..." }, { "title": "Python-format格式化函数", "url": "/posts/python-format/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "1、format 函数可以接受不限个参数，位置可以不按顺序。# 不设置指定位置，按默认顺序&quot;{} {}&quot;.format(&quot;hello&quot;, &quot;world&quot;)输出结果：&amp;gt; &#39;hello world&#39;# 设置指定位置&quot;{0} {1}&quot;.format(&quot;hello&quot;, &quot;world&quot;)输出结果：&amp;gt; &#39;hello world&#39;# 设置指定位置&quot;{1} {0} {1}&quot;.format(&quot;hel..." }, { "title": "Python-异常处理", "url": "/posts/python-exception/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、常见异常总结 BaseException 所有异常的基类 SysternExit 解释器请求退出 KeyboardInterrupt 用户中断执行 Exception 常规错误的基类 Stopiteration 迭代器没有更多的值 GeneratorExit 生成器发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloadingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDi..." }, { "title": "Mac搭建Selenium+ChromeDriver", "url": "/posts/selenium-chrome/", "categories": "Selenium", "tags": "ChromeDriver", "date": "2020-09-11 13:20:23 +0800", "snippet": "一、安装Seleniumselenium可以直接用pip安装: pip3 install selenium二、安装ChromeDriverchromedriver的版本一定要与Chrome的版本一致，不然就不起作用。下载地址：1、http://chromedriver.storage.googleapis.com/index.html2、https://npm.taobao.org/mirrors/chromedriver/下载后，将安装包加入到环境变量。以mac系统为例，将chromedriver移至/usr/bin目录下即可。sudo mv ~/Downloads/chromed..." } ]

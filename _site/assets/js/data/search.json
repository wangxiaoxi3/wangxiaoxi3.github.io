[ { "title": "接口测试-Faker库创建伪数据", "url": "/posts/python-faker/", "categories": "接口自动化", "tags": "Faker", "date": "2020-11-03 21:30:00 +0800", "snippet": "前言Faker是一个Python包，开源的Github项目，主要用来创建伪数据，使用Faker包，无需再手动生成或者手写随机数来生成数据，只需要调用Faker提供的方法，即可完成数据的生成。在软件需求、开发、测试过程中，有时候需要使用一些测试数据，针对这种情况，我们一般要么使用已有的系统数据，要么需要手动制造一些数据。由于现在的业务系统数据多种多样，千变万化。在手动制造数据的过程中，可能需要花费大量精力和工作量，此项工作既繁复又容易出错，而且部分数据的手造工作无法保障：比如UUID类数据、MD5、SHA加密类数据等。Faker帮你实现造数据的步骤。官网：https://github.co..." }, { "title": "接口测试-moco框架", "url": "/posts/moco/", "categories": "接口自动化", "tags": "Moco", "date": "2020-11-02 14:30:00 +0800", "snippet": "前言-什么是mock？mock简单的理解就是开发在开发的过程中，需要依赖一部分的接口，但是对方没有提供或者环境等等情况，总之是没有，那么开发使用mock server自己来mock数据，方便自己正常的进行开发和对编写的功能进行自测。moco框架 即提供mock server功能。一、moco安装配置1、安装jdk1.8并配置环境变量;2、在该地址中https://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/1.1.0/moco-runner-1.1.0-standalone.jar可以下载moco-runner-1.1...." }, { "title": "分区函数Partition By的用法", "url": "/posts/sql-partition/", "categories": "数据库", "tags": "SQL", "date": "2020-10-30 14:30:00 +0800", "snippet": "前言：partition by关键字是分析性函数的一部分，它和聚合函数（如group by）不同的地方在于它能返回一个分组中的多条记录，而聚合函数一般只有一条反映统计值的记录。partition by用于给结果集分组，如果没有指定那么它把整个结果集作为一个分组。partition by与group by不同之处在于前者返回的是分组里的每一条数据，并且可以对分组数据进行排序操作。后者只能返回聚合之后的组的数据统计值的记录。常用的函数：row_number() over(partition by ... order by ...)rank() over(partition by ... or..." }, { "title": "Appium-实现手势密码登陆", "url": "/posts/appium-base-4/", "categories": "Appium", "tags": "Appium", "date": "2020-10-26 14:34:00 +0800", "snippet": "前言：前几天有人问我，手势登陆如何做？于是我找了一个APP试了试，所以本文来总结使用Python+Appium来实现手势密码登陆APP。环境：MacOS：10.13.4Appium-desktop：1.6.1Xcode：9.3.1APP：众安保险-iOS版—-一、Appium API – TouchActionAppium的辅助类，主要针对手势操作，比如滑动、长按、拖动等。1、按压控件方法：press()开始按压一个元素或坐标点（x,y）。通过手指按压手机屏幕的某个位置。举例：TouchAction(driver).press(x=0,y=308).release().perform()..." }, { "title": "Appium-处理系统弹窗", "url": "/posts/appium-base-3/", "categories": "Appium", "tags": "Appium", "date": "2020-10-26 14:32:00 +0800", "snippet": "前言：最近在搞appium自动化，iOS的系统弹窗是大家都会遇到的，本文来总结处理这种弹窗的用法。环境：MacOS：10.13.4Appium-desktop：1.6.1Xcode：9.3.1—-一、使用switch_to.alert处理弹窗#所有弹窗默认允许self.driver.switch_to.alert.accept()首先推荐这种方式，几乎不会失败。解决这个问题之后，作者默默的高兴了一中午。二、使用App Inspector定位弹窗元素#弹窗中允许按键，xpath为：//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[6..." }, { "title": "Appium-服务关键字", "url": "/posts/appium-base-2/", "categories": "Appium", "tags": "Appium服务关键字", "date": "2020-10-26 14:31:00 +0800", "snippet": "General CapabilitiesThese Capabilities span multiple drivers. Capability Description Values automationName Which automation engine to use Appium (default) or Selendroidor UiAutomator2 or Espresso for Android or XCUITest for iOS or YouiEngine for app..." }, { "title": "Mac安装STF-踩坑记录", "url": "/posts/stf/", "categories": "APP", "tags": "STF", "date": "2020-10-26 14:30:00 +0800", "snippet": "一、 STF安装1、STF官网：https://github.com/openstf/stf2、安装依赖：brew install rethinkdb graphicsmagick zeromq protobuf yasm pkg-config3、安装STF：npm install -g stf二、环境依赖1、npm及node版本(node.js最好为8.X系列)$ npm version{ wangjuan: &#39;1.0.0&#39;, npm: &#39;5.5.1&#39;, ares: &#39;1.10.1-DEV&#39;, cldr: &#39;31.0.1&#..." }, { "title": "iOS-libimobiledevice命令", "url": "/posts/ios-2/", "categories": "IOS", "tags": "libimobiledevice", "date": "2020-10-26 14:30:00 +0800", "snippet": "简介A library to communicate with services of Apple iOS devices using nativeprotocols.—-1、打印app列表ideviceinstaller -l2、查看当前已连接的设备的UUIDidevice_id -l3、获取设备信息ideviceinfo4、获取设备时间idevicedate5、重启设备idevicediagnostics restart6、安装ipa包，卸载应用ideviceinstaller -i xxx.ipa//命令安装一个ipa文件到手机上，如果是企业签名的，非越狱机器也可以直接安装了。id..." }, { "title": "iOS实时查看App运行日志", "url": "/posts/ios-1/", "categories": "IOS", "tags": "libimobiledevice", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：本文讨论如何实时查看输出在console控制台的日志。一、Xcode版本号：9.4.1通过Window-&amp;gt;Devices and Simulators,打开Devices and Simulators界面，选择我们的手机，点击view device logs能看到手机中运行的进程输出的日志。如图：二、libimobiledevice安装libimobiledevice很简单，在命令行输入：brew install --HEAD libimobiledevice注意，需要加上 –HEAD 选项，如果不加，安装是老版本，不支持iOS10的手机，所以安装时，需要加上 –HE..." }, { "title": "Cookie和Session的区别", "url": "/posts/http-cookie/", "categories": "HTTP", "tags": "Cookie", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：cookie和session有着千丝万缕的联系，本文将详细介绍2者的区别。1、存储位置不同 cookie的数据信息存放在客户端浏览器上。 session的数据信息存放在服务器上。 2、存储容量不同 单个cookie保存的数据&amp;lt;=4KB，一个站点最多保存20个Cookie。 对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。 3、存储方式不同 cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。 session中能够存储任何类型的..." }, { "title": "Charles使用详解", "url": "/posts/charles/", "categories": "接口自动化", "tags": "Charles", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：Charles是在 Mac 下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。一、主界面介绍—-二、网页抓包启动 Charles 后，需要将 Charles 设置成系统代理，选择菜单中的 “Proxy” –&amp;gt; “macOS Proxy” 来将 Charles 设置成系统代理。如下所示：这样你会发现，你通过浏览器请求的网址都会出现在这里。点击某一个网址后，你会发现右边会出现这个网址请求的大概信息，点击具体的请求后会出现request和response等信息。如下图：如果是https请求出现的是乱码，这时候你就需要..." }, { "title": "Appium-超过60s的应用场景如何处理", "url": "/posts/appium-base-1/", "categories": "Appium", "tags": "Appium", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：最近在搞appium自动化项目，遇到超过60s的应用场景时，总是报错报错。如何解决呢？见下文。报错信息：2018-05-21 14:03:42:253 - [HTTP] &amp;lt;-- POST /wd/hub/session/6b55742d-aa16-413c-aedd-ba69a89ced41/element/14/click 200 135 ms - 762018-05-21 14:03:42:253 - [HTTP]2018-05-21 14:04:42:252 - [BaseDriver] Shutting down because we waited 60 se..." }, { "title": "接口自动化框架2-升级版(Pytest+request+Allure)", "url": "/posts/api-1/", "categories": "接口自动化", "tags": "Request", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：接口自动化是指模拟程序接口层面的自动化，由于接口不易变更，维护成本更小，所以深受各大公司的喜爱。第一版入口：接口自动化框架(Pytest+request+Allure)本次版本做了一些升级，增加了自动生成testcase等，一起来看看吧！～～一、简单介绍环境：Mac+Python 3+Pytest+Allure+Requestpytest==3.6.0pytest-allure-adaptor==1.7.10pytest-rerunfailures==5.0allure-python-commons==2.7.0configparser==3.5.0PyYAML==3.12requ..." }, { "title": "AnyProxy做App网络流量测试", "url": "/posts/anyproxy/", "categories": "APP", "tags": "AnyProxy", "date": "2020-10-26 14:30:00 +0800", "snippet": "前言：AnyProxy是一个开放式的HTTP代理服务器。Github主页：https://github.com/alibaba/anyproxy主要特性包括： 基于Node.js，开放二次开发能力，允许自定义请求处理逻辑 支持Https的解析 提供GUI界面，用以观察请求 本次教程以Mac系统为主。 一、安装作为全局模块，安装anyproxy:sudo npm install -g anyproxy命令行启动AnyProxy，默认端口号8001sudo anyproxy 启动后将终端http代理服务器配置为127.0.0.1:8001即可 访问http://12..." }, { "title": "Appium+Python3+iOS定位元素", "url": "/posts/appium-ios-2/", "categories": "Appium", "tags": "IOS", "date": "2020-10-26 13:32:00 +0800", "snippet": "前言：最近在做IOS自动化测试，IOS的Appium环境都配置OK，执行起来真的慢，慢到怀疑人生，那么今天就来总结一下IOS定位方式和各个定位方式的速度排序。据我观察，按查找元素的顺序速度，从快到慢的顺序如下： ios_predicate » accessibility_id » class_name »xpath注⚠️：(论坛比较多的说法是class_name»accessibility_id,在这里我们姑且认为它们的速度是一样的。)1、元素属性介绍 type：元素类型，与className作用一致，如：XCUIElementTypeButtonvalue： 一般不用name：元素..." }, { "title": "Appium+Python3+iOS真机环境搭建", "url": "/posts/appium-ios-1/", "categories": "Appium", "tags": "IOS", "date": "2020-10-26 13:31:00 +0800", "snippet": "前言：Appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。 本次环境配置相关：macOS：10.13.4Appium-desktop：1.6.1Xcode：9.3.1— 一、环境配置1、 安装homebrew： $ /usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”2、 安装libimobiledevice ： $ brew install libimobiledevi..." }, { "title": "Appium+Python3+Android入门", "url": "/posts/appium-android-1/", "categories": "Appium", "tags": "Android", "date": "2020-10-26 13:30:00 +0800", "snippet": "前言：Appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。一、环境配置1、安装Node.js https://nodejs.org/2、安装Appium http://appium.io/ 3、安装Android SDK http://tools.android-studio.org/index.php/sdk4、安装Python-client pip3 install Appium-Python-Client5、安装Appium-client npm install wd最后，打开命令行，输入“appium-..." }, { "title": "前后端常见的鉴权方式", "url": "/posts/http-token/", "categories": "HTTP", "tags": "鉴权方式", "date": "2020-10-23 10:30:00 +0800", "snippet": "常用的鉴权有四种： HTTP Basic Authentication session-cookie Token 验证 OAuth(开放授权)一、HTTP Basic Authentication这种授权方式是浏览器遵守http协议实现的基本授权方式,HTTP协议进行通信的过程中，HTTP协议定义了基本认证认证允许HTTP服务器对客户端进行用户身份证的方法。效果：客户端未未认证的时候，会弹出用户名密码输入框，这个时候请求时属于pending状态，这个时候其实服务当用户输入用户名密码的时候客户端会再次发送带Authentication头的请求。Authentication认证过程：..." }, { "title": "Python-Pytest运行参数详解", "url": "/posts/python-pytest/", "categories": "Python", "tags": "Pytest", "date": "2020-10-21 14:30:00 +0800", "snippet": "一、命令行运行pytest 支持在命令行中以如下方式运行：python -m pytest [...]二、pytest.main() 运行除了命令行运行方式外，pytest 还支持在程序中运行，在程序中运行的命令如下：pytest.main([...])不管是使用命令行运行或者使用 pytest.main() 的方式运行，它们支持的参数都是一样的。需要注意的是：pytest 的参数必须放在一个 list 或者 tuple 里。三、pytest 参数pytest 支持特别多的参数，具体有哪些参数可以通过如下命令查看：pytest -help在这里，我列出我们在工作中常用的几个: ..." }, { "title": "支付Case总结", "url": "/posts/base-zhifu/", "categories": "测试理论", "tags": "支付", "date": "2020-10-21 14:30:00 +0800", "snippet": "支付case总结的脑图如下：" }, { "title": "Shell-常用JQ命令详解", "url": "/posts/shell-jq/", "categories": "Shell", "tags": "jq", "date": "2020-10-16 13:30:00 +0800", "snippet": "一、jq 简介JSON是一种轻量级的数据交换格式。其采用完全独立于语言的文本格式，具有方便人阅读和编写，同时也易于机器的解析和生成。这些特性决定了JSON格式越来越广泛的应用于现代的各种系统中。作为系统管理员，在日常的工作中无论是编辑配置文件或者通过http请求查询信息，我们都不可避免的要处理JSON格式的数据。jq 是一款命令行下处理JSON数据的工具。其可以接受标准输入，命令管道或者文件中的JSON数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq的这种特性使我们可以很容易地在Shell脚本中调用它。二、常用基础命令基础表达式..." }, { "title": "三次握手和四次挥手", "url": "/posts/http-tcp/", "categories": "HTTP", "tags": "TCP协议", "date": "2020-10-16 13:30:00 +0800", "snippet": "1、三次握手三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。进行三次握手： 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 SYN_SENT 状态。首部的同步位SYN=1，初始序..." }, { "title": "Python-接收并打印WebHook请求", "url": "/posts/ngrok-python/", "categories": "Python", "tags": "内网穿透", "date": "2020-10-09 09:30:00 +0800", "snippet": "什么是WebHook?WebHook是一个API概念，是微服务API的使用范式之一，也被成为反向API，即：前端不主动发送请求，完全由后端推送。 举个常用例子，比如你的好友发了一条朋友圈，后端将这条消息推送给所有其他好友的客户端，就是Webhooks的典型场景。简单来说，WebHook就是一个接收HTTP-POST(或GET，PUT，DELETE)的URL。一个实现了WebHook的API提供商就是在当事件发生的时候会向这个配置好的URL发送一条信息。与请求-响应式不同，使用WebHook，你可以实时接受到变化。这是一种对客户机-服务器模式的逆转，在传统方法中，客户端从服务器请求数据，然..." }, { "title": "Ngrok内网穿透教程", "url": "/posts/ngrok/", "categories": "Ngrok", "tags": "内网穿透", "date": "2020-10-08 23:30:00 +0800", "snippet": "前言：Ngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。Ngrok可捕获和分析所有通道上的流量，便于后期分析和重放。环境配置1、进入Ngrok官网（https://ngrok.com/），注册Ngrok账号并下载Ngrok；2、解压zip文件，并进入解压文件夹；3、根据官网给定的授权码，运行如下授权命令；./ngrok authtoken 1iclsessionsessionsessionsessionsessionL1LTo3H授权码和账户是绑定的，在授权命令运行后，ngrok会将授权码保存在~/.ngrok2/ngrok.yml中，所以只需要运..." }, { "title": "Jenkins - 构建自动化任务", "url": "/posts/jenkins-zd/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 09:30:00 +0800", "snippet": "前言：Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。一、环境配置1、切换到jenkins.jar存放的目录，输入如下命令：$ java -jar jenkins.war如果需要修改端口可以使用如下命令：$ java -jar jenkins.war –httpPort=8081然后在浏览器中输入localhost:8080，localhost可以是本机的ip，也可以是计算机名。就可以打开jenkins。2、用tomcat打开解压tomcat到某个目录,如/usr/local，进入t..." }, { "title": "Docker常用命令", "url": "/posts/docker-list/", "categories": "Docker", "tags": "", "date": "2020-09-30 09:30:00 +0800", "snippet": "一、镜像管理命令1、拉取镜像docker pull {image_name}docker pull {image_name}:2.3拉取指定版本镜像2、推送镜像docker push {image_name}3、查看当前机器的所有镜像docker images4、删除当前机器的镜像docker rmi {image_name}5、强制删除镜像docker rm -f {image_name}6、为镜像打tagdocker tag {source_image_name:tag your_image_name:tag}7、获取容器/镜像的元数据docker inspect {image_id..." }, { "title": "Jenkins - job之间传参", "url": "/posts/jenkins-job/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 08:30:00 +0800", "snippet": "前言：本文介绍插件： Parameterized Trigger plugin的具体使用方法。一、插件介绍Parameterized Trigger plugin插件可以让你在构建完成时触发新的Job构建，并以各种方式为新Job构建指定参数。当然也可以添加多个配置：每个配置都有一个要触发的Job，触发时间的条件（基于当前构建的结果）和参数部分。二、使用方法1、项目Test_A，配置-构建后操作-配置如下信息:选择【Trigger parameterized build on other projects】 【Projects to build】：项目名称 【Trigger when ..." }, { "title": "Jenkins - Extended E-mail配置", "url": "/posts/jenkins-email/", "categories": "Jenkins", "tags": "持续集成", "date": "2020-09-30 07:30:00 +0800", "snippet": "前言：在Jenkins的使用中邮件提醒是一个常用功能，Extended E-mail Notification是一个功能更为齐全，使用也更为复杂的插件，本文即将为大家详细讲解如何配置相关内容，感兴趣的话继续往下看吧！～～一、全局设置进入系统管理- 系统设置 - Extended E-mail Notification⚠️注意事项：1)如果设置QQ邮箱的话，密码必须为授权码，方法为：登录QQ邮箱，在“帐户”里开启“POP3/SMTP”并获取授权码。（否则报错535）2)必须勾选【Use SMTP Authentication】【Use SSL】3)用户名必须与系统管理员邮件地址保持一致。（..." }, { "title": "Jenkins - 构建Allure Report", "url": "/posts/jenkins-allure/", "categories": "Jenkins", "tags": "Jenkins", "date": "2020-09-30 06:30:00 +0800", "snippet": "前言本文为Pytest+Allure定制报告进阶篇，集成Jenkins，在Jenkins中直接生成报告，更方便测试人员查看。一、安装插件插件官方地址：allure-jenkins-plugin 1、进入系统管理 - 管理插件2、搜索Allure，并进行安装，重启Jenkins3、进入系统管理 - 全局工具配置 - Allure Commandline4、点击 Allure Commandline安装，如下图：其中name可随便定义，作为标识用。二、构建配置 1、General - 参数化构建过程 处增加参数ALLURE_HOME，参数值填写存放allure results的默认路径。..." }, { "title": "Pytest+Allure定制报告", "url": "/posts/pytest-allure/", "categories": "Python", "tags": "Allure", "date": "2020-09-29 16:30:00 +0800", "snippet": "前言：最近在研究接口自动化的框架，好的测试报告在整个测试框架起到至关重要的部分。终于被我发现一个超好用的报告框架,不仅报告美观,而且方便CI集成。就是它，就是它：Allure Test Report！！！ 先上一张报告效果图：python版本及必要库-(2020-4-30)更新pytest==5.3.1allure-pytest==2.8.6allure-python-commons==2.8.6⚠️注：pytest-allure-adaptor已弃用，改为allure-pytest；安装allure-pytest时，需将pytest-allure-adaptor卸载一、环境配置安装P..." }, { "title": "Monkey命令", "url": "/posts/android-monkey/", "categories": "Android", "tags": "Monkey", "date": "2020-09-29 14:20:23 +0800", "snippet": "Monkey相关指令1、启动指定的应用程序，并向其发送100个伪随机事件 示例：adb shell monkey -p package_name -v 1002、日志级别 Level 1 示例：adb shell monkey -p package_name -v-v 100说明：提供较为详细的日志，包括每个发送到Activity的事件信息3、日志级别 Level 2 示例：adb shell monkey -p package_name -v-v-v 100说明：最详细的日志，包括了测试中选中/未选中的Activity信息4、用于指定伪随机数生成器的seed值，如果seed相同，..." }, { "title": "Adb命令", "url": "/posts/android-adb/", "categories": "Android", "tags": "Adb", "date": "2020-09-29 14:20:23 +0800", "snippet": "查看设备列表adb devices进入模拟器的shell模式adb shell获取管理员权限adb root安装软件adb install [-r] [-s] /Users/wangjuan/Downloads/v6.6.apk 电脑本地安装adb shell pm install [-k] /storage/emulated/0/apk/v6.6.apk 手机本地安装卸载软件adb shell pm uninstall [-k] &amp;lt;包名&amp;gt;从电脑上发送文件到设备adb push /Users/wangjuan/Downloads/v6.6.apk /sto..." }, { "title": "APP启动时间", "url": "/posts/android-start/", "categories": "Android", "tags": "Android专项测试", "date": "2020-09-29 13:20:23 +0800", "snippet": "一、adb shell 命令查看adb shell am force-stop com.qiyi.videoadb shell am start -S -W com.qiyi.video/.WelcomeActivityadb logcat |grep -I activitymanager.*Displayedlazy load：只能埋点thisTime: 最后一个activity时间totalTime：包括间接启动的activity时间waitTime：总体消耗时间二、录屏分帧录屏（通过录制整个加载过程得到加载过程视频）：adb shell screenrecord —time-..." }, { "title": "获取App系统资源", "url": "/posts/android-info/", "categories": "Android", "tags": "Android专项测试", "date": "2020-09-29 13:20:23 +0800", "snippet": "1、获取Top信息adb shell top | grep {package_name}2、获取CPU数据adb shell dumpsys cpuinfo3、获取内存数据adb shell dumpsys meminfo 进程消耗内存列表 adb shell dumpsys meminfo pakagename or Pidadb shell getprop dalvik.vm.heapgrowthlimit 查看进程可用的最大内存4、获取流量信息adb shell cat /proc/#pid#/net/dev 需先获取进程idReceive 表示收包；Transmit 表示发包..." }, { "title": "SQL多表查询", "url": "/posts/sql-join/", "categories": "数据库", "tags": "SQL", "date": "2020-09-28 13:20:23 +0800", "snippet": "一、 UNION 操作符用于合并两个或多个 SELECT 语句的结果集。# union 筛选不同值SELECT ID,Name FROM StudentsUNIONSELECT ID,Name FROM Teachers# union all 保留所有值SELECT Name FROM StudentsUNION ALLSELECT Name FROM Teachers二、 INNER JOIN（内连接），根据两个或多个表中的列之间的关系，从这些表中查询数据。SELECT Students.ID,Students.Name,Majors.Name AS MajorNameFROM Stu..." }, { "title": "SQL基础语句", "url": "/posts/sql-default/", "categories": "数据库", "tags": "SQL", "date": "2020-09-28 13:20:23 +0800", "snippet": " 显示数据库–&amp;gt; show databases; 判断是否存在数据库test_mysql,有的话先删除–&amp;gt; drop database if exists test_mysql; 创建数据库–&amp;gt; create database test_mysql; 删除数据库–&amp;gt; drop database test_mysql; 使用该数据库–&amp;gt; use test_mysql; 显示数据库中的表–&amp;gt; show tables; ..." }, { "title": "Mac下安装Maven", "url": "/posts/java-mvn/", "categories": "Java", "tags": "", "date": "2020-09-28 13:20:23 +0800", "snippet": "1、下载maven2、解压到指定目录 /Library/apache-maven-3.6.33、设置环境变量，打开终端，输入vim ~/.bash_profileexport MAVEN_HOME=/Library/apache-maven-3.6.3export PATH=$PATH:$MAVEN_HOME/bin添加完之后，按esc，执行:wq保存退出4、执行 source ~/.bash_profile 为配置环境变量生效5、测试 mvn -v 查看是否出现maven版本Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6b..." }, { "title": "Mac下安装AgileTC", "url": "/posts/java-agileTC/", "categories": "Java", "tags": "用例管理平台", "date": "2020-09-28 13:20:23 +0800", "snippet": "简介AgileTC是一套敏捷的测试用例管理平台，支持测试用例管理、执行计划管理、进度计算、多人实时协同等能力，方便测试人员对用例进行管理和沉淀。产品以脑图方式编辑可快速上手，用例关联需求形成流程闭环，并支持组件化引用，可在各个平台嵌入使用，是测试人员的贴心助手！环境依赖 Mac/Linux/Windows  Java 1.8  Mysql 服务端  Maven安装使用1、下载源码git clone https://github.com/didi/AgileTC.git 2、创建依赖数据库，默认数据库名为：case_manager 执行sql:  create database c..." }, { "title": "Python-字典与序列", "url": "/posts/python-set/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "一、集合（set）和字典（dict）区别：1、字典是一系列由键key和值value配对组成的元素的集合，在python3.7+，字典被确定为有序。3.6之前是无序的，其长度大小可变，元素可以任意的删减和改变。2、集合没有键和值的配对，是一系列无序的，唯一的元素组合。二、创建集合（set）和字典（dict）# 创建字典d1 = {&#39;name&#39;:&#39;jason&#39;,&#39;age&#39;:20,&#39;gender&#39;:&#39;male&#39;}d2 = dict({&#39;name&#39;:&#39;jason&#39;,&#39;age&#..." }, { "title": "Python-知识要点图", "url": "/posts/python-more/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "" }, { "title": "Python-列表与元组", "url": "/posts/python-list/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "Python 中最常见的两种数据结构：列表（list）和元组（tuple）1、列表是动态的，长度不固定，可以增加，删除，改变元素2、元组是静态的，长度固定，无法增加，删除，改变一、修改列表和元组tup = (1,2,3,4)new_tup = tup + (5,)print (new_tup)结果：(1,2,3,4,5)l = [1,2,3,4]l.append(5)print(l)结果：[1,2,3,4,5]二、列表和元组索引```-1 表示最后一个元素，-2 表示倒数第二个元素，以此类推。l = [1, 2, 3, 4]print(l[-1])4tup = (1, 2, 3, 4)p..." }, { "title": "Python-匿名函数", "url": "/posts/python-lambda/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "匿名函数的关键字是 lambda，之后是一系列的参数，然后用冒号隔开，最后则是由这些参数组成的表达式。lambda argument1, argument2,... argumentN : expression第一:lambda 是一个表达式（expression），并不是一个语句（statement）。square = lambda x: x**2square(3)运行结果：9第二:lambda 的主体是只有一行的简单表达式，并不能扩展成一个多行的代码块。第三:为什么要使用匿名函数？ 减少代码的重复性 模块化代码" }, { "title": "Python-异常总结", "url": "/posts/python-exception/", "categories": "Python", "tags": "", "date": "2020-09-14 13:30:00 +0800", "snippet": "一、常见异常总结 字符 说明 BaseException 所有异常的基类 SysternExit 解释器请求退出 KeyboardInterrupt 用户中断执行 Exception 常规错误的基类 Stopiteration 迭代器没有更多的值 GeneratorExit 生成器发生异常来通知退出 Stand..." }, { "title": "MySQL与MongoDB区别", "url": "/posts/sql-diff/", "categories": "数据库", "tags": "", "date": "2020-09-14 13:20:23 +0800", "snippet": "前言：MySQL与MongoDB都是开源的常用数据库，但是MySQL是传统的关系型数据库，MongoDB则是非关系型数据库，也叫文档型数据库，是一种NoSQL的数据库。它们各有各的优点，关键是看用在什么地方。所以我们所熟知的那些SQL语句就不适用于MongoDB了，因为SQL语句是关系型数据库的标准语言。一、关系型数据库-MySQL1、在不同的引擎上有不同的存储方式。2、查询语句是使用传统的sql语句，拥有较为成熟的体系，成熟度很高。3、开源数据库的份额在不断增加，mysql的份额页在持续增长。4、缺点就是在海量数据处理的时候效率会显著变慢。二、非关系型数据库-MongoDB非关系型数据..." }, { "title": "MongoDB常用命令", "url": "/posts/sql-db/", "categories": "数据库", "tags": "MongoDB", "date": "2020-09-14 13:20:23 +0800", "snippet": "1、常用的命令 show dbs 显示数据库列表 use dbname 进入dbname数据库，大小写敏感 show collections 显示数据库中的集合，相当于表格2、创建&amp;amp;新增 db.users.save({“name”:”jack”}) 创建了名为users的集合，并新增了一条{“name”:”lecaf”}的数据 db.users.insert({“name”:”jack”, “age”:20}) 在users集合中插入一条新数据，如果没有users这个集合，mongodb会自动创建3、删除 db.users.remove() 删除users集合..." }, { "title": "Selenium-显示等待方法", "url": "/posts/selenium-until/", "categories": "Selenium", "tags": "Selenium", "date": "2020-09-14 13:20:23 +0800", "snippet": "1、显示等待语法WebDriverWait(driver, timeout, poll_frequency, ignored_exceptions)driver: 传入WebDriver实例，即webdriver.Chrome()timeout: 超时时间，等待的最长时间（同时要考虑隐性等待时间）poll_frequency: 调用until或until_not中的方法的间隔时间，默认是0.5秒ignored_exceptions: 忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常， 则不中断代码，继续等待，如果抛出的是这个元组外的异常，则中断代码，抛出异..." }, { "title": "Python-字符串", "url": "/posts/python-str/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "Python - 字符串一、单引号、双引号、三引号区别1、Python 中单引号、双引号和三引号的字符串是一模一样的，没有区别。2、双引号中可内嵌带引号的字符串。3、三引号则主要应用于多行字符串的情景，如函数注释等。二、转义符 转义字符 说明 \\newline 接下一行 \\\\ 表示| \\’ 表示单引号 \\” 表示双引号 \\n 换行 \\t ..." }, { "title": "Python-正则表达式二", "url": "/posts/python-regular-2/", "categories": "Python", "tags": "正则表达式", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、常用的匹配规则总结表 字符 说明 \\w 匹配字母数字及下划线 \\W 匹配非字母数字及下划线 \\s 匹配任意空白字符，等价于 [\\t\\n\\r\\f]. \\S 匹配任意非空字符 \\d 匹配任意数字，等价于 [0-9] \\D 匹配任意非数字 \\A 匹配字符串开始 \\Z ..." }, { "title": "Python-正则表达式一", "url": "/posts/python-regular-1/", "categories": "Python", "tags": "正则表达式", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、简单介绍-在线正则表达式测试工具 通配符(.)正则表达式可以匹配多于一个的字符串，通配符（.）可以匹配任何除换行符“\\n”外的字符。 例：待匹配文本：`school`正则表达式：`s…l`匹配结果：`school` 转义符()转义字符，使用后使一个字符改变原来的意思，如果字符串中有字符需要匹配，可以使用（\\字符）来表达。 例：待匹配文本：`W3.school`正则表达式：`W3\\.school`匹配结果：`W3.school` 字符集（[ ]）我们可以使用中括号（[ ]）括住字符串来创建字符集。可以使用范围，比如‘[a-z]’能够匹配a到z的..." }, { "title": "Python-运算符", "url": "/posts/python-operator/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "1、Python算术运算符以下假设变量a为10，变量b为21：2、Python比较运算符以下假设变量a为10，变量b为20：3、赋值运算符以下假设变量a为10，变量b为20：4、Python位运算符按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：下表中变量 a 为 60，b 为 13二进制格式如下：a = 0011 1100b = 0000 1101-----------------a&amp;amp;b = 0000 1100a|b = 0011 1101a^b = 0011 0001~a = 1100 0011以上，对你有帮助的话，点赞❤️吧～～" }, { "title": "Python-List操作", "url": "/posts/python-list/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "前言：序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。1、创建list只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：list0 = [] # 空列表list1 = [&#39;phthon&#39;, &#39;java&#39;, 1997, 2000]list2 = [1, 2, 3, 4, 5 ]list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]与字符串的索引一样，列表索引从0开始。列表可以进行截..." }, { "title": "Python-format格式化函数", "url": "/posts/python-format/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "1、format 函数可以接受不限个参数，位置可以不按顺序。# 不设置指定位置，按默认顺序&quot;{} {}&quot;.format(&quot;hello&quot;, &quot;world&quot;)输出结果：&amp;gt; &#39;hello world&#39;# 设置指定位置&quot;{0} {1}&quot;.format(&quot;hello&quot;, &quot;world&quot;)输出结果：&amp;gt; &#39;hello world&#39;# 设置指定位置&quot;{1} {0} {1}&quot;.format(&quot;hel..." }, { "title": "Python-异常处理", "url": "/posts/python-exception/", "categories": "Python", "tags": "", "date": "2020-09-11 13:30:00 +0800", "snippet": "一、常见异常总结 BaseException 所有异常的基类 SysternExit 解释器请求退出 KeyboardInterrupt 用户中断执行 Exception 常规错误的基类 Stopiteration 迭代器没有更多的值 GeneratorExit 生成器发生异常来通知退出 StandardError 所有的内建标准异常的基类 ArithmeticError 所有数值计算错误的基类 FloadingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDi..." }, { "title": "Mac搭建Selenium+ChromeDriver", "url": "/posts/selenium-chrome/", "categories": "Selenium", "tags": "ChromeDriver", "date": "2020-09-11 13:20:23 +0800", "snippet": "一、安装Seleniumselenium可以直接用pip安装: pip3 install selenium二、安装ChromeDriverchromedriver的版本一定要与Chrome的版本一致，不然就不起作用。下载地址：1、http://chromedriver.storage.googleapis.com/index.html2、https://npm.taobao.org/mirrors/chromedriver/下载后，将安装包加入到环境变量。以mac系统为例，将chromedriver移至/usr/bin目录下即可。sudo mv ~/Downloads/chromed..." } ]

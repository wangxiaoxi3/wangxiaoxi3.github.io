I"<h3 id="一常用的匹配规则总结表">一、常用的匹配规则总结表</h3>
<p>| 字符 | 说明 |
| :—-: | :—-: |
| <code class="highlighter-rouge">\w</code> 	| 匹配字母数字及下划线|
| <code class="highlighter-rouge">\W</code>	| 匹配非字母数字及下划线|
| <code class="highlighter-rouge">\s</code> 	| 匹配任意空白字符，等价于 [\t\n\r\f].|
| <code class="highlighter-rouge">\S</code> 	| 匹配任意非空字符|
| <code class="highlighter-rouge">\d</code> 	| 匹配任意数字，等价于 [0-9]|
| <code class="highlighter-rouge">\D</code> 	| 匹配任意非数字|
| <code class="highlighter-rouge">\A</code> 	| 匹配字符串开始|
| <code class="highlighter-rouge">\Z</code> 	| 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串|
| <code class="highlighter-rouge">\z</code> 	| 匹配字符串结束|
| <code class="highlighter-rouge">\G</code>	| 匹配最后匹配完成的位置|
| <code class="highlighter-rouge">\n</code> 	| 匹配一个换行符|
| <code class="highlighter-rouge">\t</code> 	| 匹配一个制表符|
| <code class="highlighter-rouge">^</code>	| 匹配字符串的开头|
| <code class="highlighter-rouge">$</code> 	| 匹配字符串的末尾|
| <code class="highlighter-rouge">.</code> 	| 匹配任意字符，除了换行符|
| <code class="highlighter-rouge">[...]</code> 	| 用来表示一组字符，单独列出：[amk] 匹配 ‘a’，’m’ 或 ‘k’|
| <code class="highlighter-rouge">[^...]</code> 	| 不在 [] 中的字符：[^abc]匹配除了 a,b,c 之外的字符。|
| <code class="highlighter-rouge">*</code> 	| 匹配 0 个或多个的表达式。|
| <code class="highlighter-rouge">+</code> 	| 匹配 1 个或多个的表达式。|
| <code class="highlighter-rouge">?</code> 	| 匹配 0 个或 1 个由前面的正则表达式定义的片段，非贪婪方式|
| <code class="highlighter-rouge">{n}</code> 	| 精确匹配 n 个前面表达式。|
| <code class="highlighter-rouge">{n, m}</code> 	| 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式|
| a | b	| 匹配 a 或 b|
| <code class="highlighter-rouge">( )</code> 		| 匹配括号内的表达式，也表示一个组|</p>

<hr />
<h3 id="二re库中常用方法">二、re库中常用方法</h3>

<p><code class="highlighter-rouge">re.match(pattern, string, flags=0)</code>
尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none</p>

<p><code class="highlighter-rouge">re.search(pattern, string, flags=0)</code>
扫描整个字符串并返回第一个成功的匹配</p>

<p><code class="highlighter-rouge">re.sub(pattern, repl, string, count=0)</code>
用于替换字符串中的匹配项，repl : 替换的字符串，也可为一个函数</p>

<p><code class="highlighter-rouge">re.compile(pattern[, flags])</code>
用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用</p>

<p><code class="highlighter-rouge">re.findall(string[, pos[, endpos]])</code>
在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表</p>

<p><code class="highlighter-rouge">re.split(pattern, string[, maxsplit=0, flags=0])</code>
能够匹配的子串将字符串分割后返回列表</p>

<hr />
<h3 id="三修饰符总结">三、修饰符总结</h3>
<p>| 修饰符 | 说明 |
| —-|—- |
|<code class="highlighter-rouge">re.I</code>	| 使匹配对大小写不敏感|
|<code class="highlighter-rouge">re.L</code>	| 做本地化识别（locale-aware）匹配|
|<code class="highlighter-rouge">re.M</code>	| 多行匹配，影响 ^ 和 $|
|<code class="highlighter-rouge">re.S</code>	| 使 . 匹配包括换行在内的所有字符|
|<code class="highlighter-rouge">re.U</code>	| 根据Unicode字符集解析字符, 这个标志影响 \w, \W, \b, \B.|
|<code class="highlighter-rouge">re.X</code>	| 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解|</p>

<table>
  <tbody>
    <tr>
      <td>取值可以使用按位或运算符’</td>
      <td>‘表示同时生效，比如re.I</td>
      <td>re.M</td>
    </tr>
  </tbody>
</table>

<hr />
<h3 id="四常用正则表达式">四、常用正则表达式</h3>

<p>1、匹配email地址:
<code class="highlighter-rouge">[\w!#$%&amp;'*+/=?^_</code>{|}~-]+(?:.[\w!#$%&amp;’*+/=?^_<code class="highlighter-rouge">{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?</code></p>

<p>2、匹配网址URL：
<code class="highlighter-rouge">[a-zA-z]+://[^\s]*</code></p>

<p>3、匹配18位身份证号：
<code class="highlighter-rouge">^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$</code></p>

<p>4、匹配年月日格式：
<code class="highlighter-rouge">([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8])))</code></p>

<p>5、匹配整数：
<code class="highlighter-rouge">^-?[1-9]\d*$</code></p>

<p>6、匹配正整数：
<code class="highlighter-rouge">^[1-9]\d*$</code></p>

<p>7、匹配负整数：
<code class="highlighter-rouge">^-[1-9]\d*$</code></p>

<p>8、匹配空白行：
<code class="highlighter-rouge">\n\s*\r</code></p>

:ET